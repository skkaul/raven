"""autogenerated by genmsg_py from config.msg. Do not edit."""
import roslib.message
import struct

import roslib.msg

class config(roslib.message.Message):
  _md5sum = "8886c8836227fe18873a3b2abc061efe"
  _type = "roboteq/config"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
int32 MotorAmps1
int32 MotorAmps2
int32 BatteryAmps1
int32 BatteryAmps2
int32 motorpower1
int32 motorpower2
int32 drivervoltage
int32 BatteryVoltage
int32 DSUBvoltage



================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','MotorAmps1','MotorAmps2','BatteryAmps1','BatteryAmps2','motorpower1','motorpower2','drivervoltage','BatteryVoltage','DSUBvoltage']
  _slot_types = ['Header','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,MotorAmps1,MotorAmps2,BatteryAmps1,BatteryAmps2,motorpower1,motorpower2,drivervoltage,BatteryVoltage,DSUBvoltage
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(config, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      if self.MotorAmps1 is None:
        self.MotorAmps1 = 0
      if self.MotorAmps2 is None:
        self.MotorAmps2 = 0
      if self.BatteryAmps1 is None:
        self.BatteryAmps1 = 0
      if self.BatteryAmps2 is None:
        self.BatteryAmps2 = 0
      if self.motorpower1 is None:
        self.motorpower1 = 0
      if self.motorpower2 is None:
        self.motorpower2 = 0
      if self.drivervoltage is None:
        self.drivervoltage = 0
      if self.BatteryVoltage is None:
        self.BatteryVoltage = 0
      if self.DSUBvoltage is None:
        self.DSUBvoltage = 0
    else:
      self.header = roslib.msg._Header.Header()
      self.MotorAmps1 = 0
      self.MotorAmps2 = 0
      self.BatteryAmps1 = 0
      self.BatteryAmps2 = 0
      self.motorpower1 = 0
      self.motorpower2 = 0
      self.drivervoltage = 0
      self.BatteryVoltage = 0
      self.DSUBvoltage = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9i.pack(_x.MotorAmps1, _x.MotorAmps2, _x.BatteryAmps1, _x.BatteryAmps2, _x.motorpower1, _x.motorpower2, _x.drivervoltage, _x.BatteryVoltage, _x.DSUBvoltage))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.MotorAmps1, _x.MotorAmps2, _x.BatteryAmps1, _x.BatteryAmps2, _x.motorpower1, _x.motorpower2, _x.drivervoltage, _x.BatteryVoltage, _x.DSUBvoltage,) = _struct_9i.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9i.pack(_x.MotorAmps1, _x.MotorAmps2, _x.BatteryAmps1, _x.BatteryAmps2, _x.motorpower1, _x.motorpower2, _x.drivervoltage, _x.BatteryVoltage, _x.DSUBvoltage))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.MotorAmps1, _x.MotorAmps2, _x.BatteryAmps1, _x.BatteryAmps2, _x.motorpower1, _x.motorpower2, _x.drivervoltage, _x.BatteryVoltage, _x.DSUBvoltage,) = _struct_9i.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_9i = struct.Struct("<9i")
_struct_3I = struct.Struct("<3I")
